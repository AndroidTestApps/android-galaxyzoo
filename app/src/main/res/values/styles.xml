<?xml version="1.0" encoding="utf-8"?>
<resources>

    <style name="AppTheme" parent="AppTheme.Base" />

    <!-- Base application theme.
     Defining this lets values-v21/styles.xml reuse it with changes. -->
    <style name="AppTheme.Base" parent="Theme.AppCompat">
        <!-- Customize your theme here. -->

        <!-- Use the Toolbar instead (new in API 21 and AppCompat). -->
        <item name="windowActionBar">false</item>

        <!-- colorPrimary is used, for instance, for the default ActionBar (but not Toolbar) background.
             We specify the same color for the toolbar background in toolbar.xml. -->
        <item name="colorPrimary">@color/color_primary</item>

        <!-- textColorPrimary is in the action bar.
             But it also changes large text for normal,
             so we only change this in the toolbar-specific theme. -->
        <!-- <item name="android:textColorPrimary">@color/text_color_primary</item> -->

        <!-- colorPrimaryDark is used for the status bar (with the battery, clock, etc). -->
        <item name="colorPrimaryDark">@color/color_primary_dark</item>

        <!-- colorAccent is used as the default value for colorControlActivated
             which is used to tint widgets. -->
        <item name="colorAccent">@color/color_accent</item>

        <!-- windowBackground is the color for the background. -->
        <item name="android:windowBackground">@color/color_window_background</item>

        <!--
        <item name="android:actionOverflowButtonStyle">@style/GalaxyZooButtonOverflow</item>
        <item name="actionOverflowButtonStyle">@style/GalaxyZooButtonOverflow</item>
        -->

    </style>

    <!-- Instead of this, we our custom theme on the toolbar instead,
    to get both the dark text and the dark overflow icon.
    <style name="toolbarTitleTextAppearance"
        parent="@style/TextAppearance.Widget.AppCompat.Toolbar.Title">
        <item name="android:textColor">@color/color_toolbar_title_text</item>
    </style>
    -->

    <style name="GalaxyZooThemeToolbarDarkOverflow" parent="AppTheme">

        <!-- android:textColorPrimary is the  color of the title text in the Toolbar,
        in the Theme.AppCompat theme:  -->
        <item name="android:textColorPrimary">@color/abc_primary_text_material_light</item>

        <!-- android:textColorPrimaryInverse is the  color of the title text in the Toolbar,
        in the Theme.AppCompat.Light theme:  -->
        <!-- <item name="android:textColorPrimaryInverse">@color/abc_primary_text_material_light</item> -->

        <!-- android:actionMenuTextColor is the color of the text of action (menu) items in the Toolbar,
        at least in the Theme.AppCompat theme.
        For some reason, they already get the textColorPrimary when running on API 21,
        but not on older versions of Android, so this is only necessary for older
        Android versions.-->
        <item name="actionMenuTextColor">@color/abc_primary_text_material_light</item>


        <!-- android:textColorSecondary is the color of the menu overflow icon (three vertical dots) -->
        <item name="android:textColorSecondary">@color/abc_secondary_text_material_light</item>

        <!-- This would set the toolbar's background color,
        but setting this also changes the popup menu's background,
        even if we define popupTheme for our <Toolbar> -->
        <!-- <item name="android:background">@color/color_primary</item> -->

    </style>

    <!-- If we were using the Material theme, we could use
         parent="@android:style/Widget.Material.Button.Borderless -->
    <style name="GalaxyZooButtonStyle" parent="@android:style/Widget.Button">
        <!-- Let the color and size in the textAppearance take precedence.
             This only seems to be necessary when running on API versions less than 21.
             Otherwise, older Android versions will show black text on the black background,
             making the text invisible. -->
        <item name="android:textColor">@null</item>
        <item name="android:textSize">@null</item>

        <item name="android:textAppearance">@style/TextAppearance.AppCompat.Small</item>
    </style>

    <!-- We don't use parent="@android:style/Widget.Material.Button.Toggle"
         (available if we were using the Material theme) because
         we want to color the whole area when it is selected, not just a line at the bottom. -->
    <style name="GalaxyZooToggleButtonStyle" parent="GalaxyZooButtonStyle">
        <item name="android:background">@drawable/question_answer_checkbox_background</item>
    </style>

    <!--
    <style name="GalaxyZooAnswerButtonStyle" parent="GalaxyZooButtonStyle">
    </style>
    -->

</resources>
